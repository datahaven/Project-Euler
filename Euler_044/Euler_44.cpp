// Project Euler 44
//
// Adrian Dale 30/08/2010

/*
Pentagonal numbers are generated by the formula, P_(n)=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P_(4) + P_(7) = 22 + 70 = 92 = P_(8). However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P_(j) and P_(k), for which their sum and 
difference is pentagonal and D = |P_(k) − P_(j)| is minimised; what is the value of D?
*/

// Note that inverse fn is n = (sqrt(24x+1)+1)/6

// This code finds the answer but is way too slow.
// It can be speeded up by reducing MAX_PENT but only after we know the answer.
// I think there's more algebra we can do to directly work out sum/diff
#include <iostream>

using namespace std;

inline int P(int n)
{
	return (n * (3 * n - 1)) / 2;
}

inline bool isPent( int x )
{
	double dblx = static_cast<double>(x);
	double n = ( sqrt(24 * dblx + 1) + 1.0 ) / 6.0;
	return abs(n - floor(n)) < 0.000001;
}

int main()
{
	cout << "Euler 44" << endl;

	static const int MAX_PENT = 2500;

	int D = -1;

	for( int j=1; j<MAX_PENT; ++j )
	{
		for( int k=j; k<MAX_PENT; ++k )
		{
			int pj = P(j);
			int pk = P(k);
			if ( isPent( pj + pk ) && isPent( pk - pj ) )
			{
				cout << j << " " << k << " : " << abs(pk - pj) << endl;
			}
		}
	}

	return 0;
}