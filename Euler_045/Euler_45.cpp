// Project Euler 45
//
// Adrian Dale 30/08/2010

/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	T_(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	P_(n)=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	H_(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T_(285) = P_(165) = H_(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

*/

// This one works, though I've seen slightly cleverer ones.
// Answer is not well formatted, so I used J to handle the big integers once I know
// what n was.
// Also apparently I can use the fact that hex numbers ARE triangular.
#include <iostream>

using namespace std;

inline double P(double n)
{
	return (n * (3 * n - 1)) / 2;
}

inline double H(double n)
{
	return n * ( 2*n - 1 );
}

inline double T(double n)
{
	return n * (n + 1) / 2;
}

inline bool isTri( double x )
{
	double dblx = static_cast<double>(x);
	double n = ( sqrt(8 * dblx + 1) + 1.0 );
	return abs(n - floor(n)) < 0.000001;
}

inline bool isPent( double x )
{
	double dblx = static_cast<double>(x);
	double n = ( sqrt(24 * dblx + 1) + 1.0 ) / 6.0;
	return abs(n - floor(n)) < 0.000001;
}

inline bool isHex( double x )
{
	double dblx = static_cast<double>(x);
	double n = ( sqrt(8 * dblx + 1) + 1.0 ) / 4.0;
	return abs(n - floor(n)) < 0.000001;
}

int main()
{
	cout << "Euler 45" << endl;

	for( int i=286; i<10000000; ++i )
	{
		double tri = T(i);
		if ( isPent( T(i) ) && isHex( T(i) ) )
		{
			cout << i << " : " << T(i) << " " << P(i) << " " << H(i) << endl;
			break;
		}
	}

	return 0;
}