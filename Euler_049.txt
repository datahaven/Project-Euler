Euler 49

The arithmetic sequence, 1487, 4817, 8147, in which each of the 
terms increases by 3330, is unusual in two ways:
 (i) each of the three terms are prime, and, 
(ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of
 three 1-, 2-, or 3-digit primes, exhibiting this property, 
but there is one other 4-digit increasing sequence.

What 12-digit number do you form by concatenating the 
three terms in this sequence?

Step One
========

Using code from Euler 50

 _1 p: 10000
1229
   p: 1229
10007
  _1 p: 1000
168
   p: 168
1009
   p:167
997

So, a couple of quick calculations tell us that the four digit 
primes range from p:168 to p:1228

p: 168+i.(1229-168)
or

p:168+i.1061

and we know there are 1061 of them.

Step Two
========

Next work out how to turn a number into separate chars.
": is the default format operator

(i.!4) A. '1234'

(i.24) A. ": 1234

Turn them back into numbers:

".(i.24)A.":1234
1234 1243 ...

Step Three
==========

Get just the prime perms out:
(#~(1&p:))(".(i.24)A.":) 1234
1423 2143 2341 4231
note using #~ so we get a hook (#~(1&p:))
(1&p:) x # x where x is (".(i.24A.":) 1234

Step Four
=========

primePerms =: 3 : 0
(#~(1&p:))(".(i.24)A.":) y
)

primePerms ("0) 1234 5678
1423 2143 2341 4231
5867 6857    0    0

primePerms ("0) p:168+i.1061

Gives all of them in a big table

Step Five
=========

Given a list of primePerms, sort them 
~. 1 4 2 3 2 1 1

({~/:) is the hook that does the sorting

({~/:) ~. 1 4 2 3 2 1 1

Step Six
========

Remove the zeros from teh sorted list

(#~1&<) 0 7993 9397 9739 9973

(#~1&<) ({~/:) ~. 9973 9739 etc

Changed this to remove the primes below 1000

(#~1000&<) ({~/:) ~. 9973 9739 900
9739 9973

Step Seven
==========

Looking in list for our +3330 and +6660

ina =: 4 : '((x+6660) e. y) * (x+3330) e. y'


a is 1487 1847 4817 4871 7481 7841 8147 8741

a ina a
1 0 0 0 0 0 0 0

(a ina a) # a
1487
ie which of the numbers in the list satisfy the +3330 property?


Step Eight
==========

Putting it together

box the perms: b =: <"1 primePerms("0) 1487 9926

Idea - bpp is boxprimeperms
bpp =: 3 : '<(#~(1&p:))(".(i.24)A.":) y'

Added in the tidying stuff:

bpp =: 3 : '<(#~1000&<) ({~/:) ~.(#~(1&p:))(".(i.24)A.":) y'

Show all of them
bpp ("0) p:168+i.1061


  bpp =: 3 : 0
nums =. (#~1000&<) ({~/:) ~.(#~(1&p:))(".(i.24)A.":) y
(nums ina nums) # nums
)


bpp ("0) p:168+i.1061
Correctly shows all the results but also shows lots of zeros
which I'd like to remove

Used nub, which feels a bit cheaty
~. bpp("0)p:168+i.1061
   0
1487
2969

2969 , (2969+3330) , (2969+6660   )

2969 6299 9629

296962999629


Final Answer:

ina =: 4 : '((x+6660) e. y) * (x+3330) e. y'

bpp =: 3 : 0
nums =. (#~1000&<) ({~/:) ~.(#~(1&p:))(".(i.24)A.":) y
(nums ina nums) # nums
)

~. bpp("0)p:168+i.1061

=============

The olegyk "pro" version:

P=: p:([+i.@-~)/p:^:_1]1000 9999
   dif=: 3 : '+./,2=/\"1 /:~"1|-/~/:~y.'
   (#~ dif@>) (/:~@":"0 </. ]) P
+---------------------------------------+-------------------+
|1487 1847 4817 4871 7481 7841 8147 8741|2699 2969 6299 9629|
+---------------------------------------+-------------------+

P is the list of all primes between 1000 and 9999

